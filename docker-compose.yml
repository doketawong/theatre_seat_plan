version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: theatre_db
    environment:
      POSTGRES_DB: moviematic
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - theatre_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: theatre_backend
    environment:
      - NODE_ENV=production
      - PORT=5001
      - HOST=0.0.0.0
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=moviematic
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    ports:
      - "5001:5001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./house:/app/house
      - ./participant:/app/participant
    networks:
      - theatre_network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/hello"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5001
    container_name: theatre_frontend
    ports:
      - "80:80"
      - "3000:80"  # Alternative port for development
    networks:
      - theatre_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local

networks:
  theatre_network:
    driver: bridge
